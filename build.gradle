import org.jetbrains.kotlin.config.KotlinCompilerVersion

plugins {
    id 'org.jetbrains.kotlin.jvm'
    id 'org.jetbrains.kotlin.plugin.spring'
    id 'io.spring.dependency-management'
    id 'org.springframework.boot'
    id 'org.asciidoctor.jvm.convert'
}

println("Using Gradle version: $gradle.gradleVersion")
println("Using Kotlin compiler version: $KotlinCompilerVersion.VERSION")
println("Using Java compiler version: ${JavaVersion.current()}")

group = 'demo.kotlin'
version = '0.0.1'

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
    }
}

configurations {
    asciidoctorExt
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    implementation 'org.springframework.data:spring-data-r2dbc'
    implementation "org.ufoss.kotysa:kotysa-spring-r2dbc:$kotysa_version"
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
    implementation "io.jsonwebtoken:jjwt-api:$jjwt_version"
    implementation "io.jsonwebtoken:jjwt-jackson:$jjwt_version"
    implementation "org.ufoss.kolog:kolog:$kolog_version"
    implementation "io.projectreactor.kotlin:reactor-kotlin-extensions:$reactor_kotlin_extension_version"

    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'io.r2dbc:r2dbc-h2'
    runtimeOnly "io.jsonwebtoken:jjwt-impl:$jjwt_version"

    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'

    testImplementation("org.springframework.boot:spring-boot-starter-test") {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-webtestclient'
}

ext {
    snippetsDir = file('build/generated-snippets')
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams = true
    }
}

asciidoctor {
    configurations 'asciidoctorExt'
    inputs.dir snippetsDir
    dependsOn test
}

bootJar {
    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
}

// when version changes :
// -> execute ./gradlew wrapper, then delete .gradle directory, then execute ./gradlew wrapper again
wrapper {
    gradleVersion='8.2'
    distributionType=Wrapper.DistributionType.ALL
}
